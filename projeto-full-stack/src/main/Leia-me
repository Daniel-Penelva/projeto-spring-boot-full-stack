interface CommandLineRunner

A interface CommandLineRunner é uma interface fornecida pelo Spring Boot que permite executar código específico quando a aplicação é iniciada a partir da 
linha de comando. Ela faz parte do módulo Spring Boot e é frequentemente usada para executar tarefas de inicialização, configuração ou qualquer outra lógica 
que você queira que seja executada assim que a aplicação seja iniciada.

A interface CommandLineRunner possui um único método chamado run, que é implementado pela sua aplicação. O método run é chamado automaticamente pelo Spring 
Boot após o contexto da aplicação ter sido totalmente carregado, permitindo que você execute lógica personalizada.

args: É uma matriz de argumentos que podem ser passados ​​da linha de comando quando a aplicação é iniciada. Isso permite que você passe informações específicas 
para a lógica de inicialização, se necessário.

A interface CommandLineRunner é útil quando você precisa executar tarefas de inicialização, como preenchimento de dados iniciais no banco de dados, 
configurações específicas ou qualquer outra lógica que deve ser executada assim que a aplicação iniciar.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------

A classe `java.util.Arrays` é uma classe utilitária fornecida pelo Java para trabalhar com arrays (matrizes) de tipos primitivos ou objetos. Ela oferece 
diversos métodos estáticos para realizar várias operações em arrays, como ordenação, pesquisa, comparação e manipulação.

Aqui estão alguns dos principais métodos e funcionalidades oferecidos pela classe `Arrays`:

1. **Ordenação de Arrays**:
   - `sort(T[] a)`: Ordena um array de objetos comparáveis em ordem crescente.
   - `sort(T[] a, Comparator<? super T> c)`: Ordena um array usando um comparador personalizado.

2. **Pesquisa em Arrays**:
   - `binarySearch(T[] a, T key)`: Realiza uma pesquisa binária em um array ordenado e retorna o índice do elemento encontrado ou um valor negativo se não 
                                   for encontrado.
   - `binarySearch(T[] a, int fromIndex, int toIndex, T key)`: Realiza uma pesquisa binária em um subarray especificado.

3. **Preenchimento de Arrays**:
   - `fill(T[] a, T val)`: Preenche todo o array com um valor específico.
   - `fill(T[] a, int fromIndex, int toIndex, T val)`: Preenche um subarray específico com um valor.

4. **Comparação de Arrays**:
   - `equals(T[] a, T[] a2)`: Verifica se dois arrays são iguais, ou seja, possuem os mesmos elementos na mesma ordem.
   - `deepEquals(Object[] a1, Object[] a2)`: Verifica a igualdade profunda de arrays, considerando arrays aninhados.

5. **Conversão de Arrays para String**:
   - `toString(T[] a)`: Converte um array em uma string formatada.

6. **Cópia de Arrays**:
   - `copyOf(T[] original, int newLength)`: Cria uma cópia de um array com um novo tamanho.
   - `copyOfRange(T[] original, int from, int to)`: Cria uma cópia de um subarray dentro de um novo array.

7. **Manipulação de Arrays**:
   - `asList(T... a)`: Converte um array em uma lista do tipo `List<T>`.
   - `stream(T[] array)`: Cria um fluxo (stream) a partir de um array, útil para operações de stream.

A classe `Arrays` fornece uma série de utilitários para tornar o trabalho com arrays mais eficiente e conveniente. Ela é parte do pacote `java.util` e não 
precisa ser importada explicitamente, já que faz parte das classes padrão do Java.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------
Associação Muitos para Muitos entre Categoria e Produto

(name = "<nome_da_tabela>", JoinColumns(@JoinColumn(name="<nome_da_chave_estrangeira_do_produto>"),
inverseJoinColumns = @JoinColumn(name="<nome_da_chave_estrangeira_da_categoria>"))

O trecho de código está utilizando a anotação `@JoinTable` para mapear uma associação muitos-para-muitos entre duas entidades em um banco de dados usando o 
framework de persistência JPA (Java Persistence API), como o Hibernate.

Vou explicar cada parte do código:

```java
@JoinTable(name = "PRODUTO_CATEGORIA", 
    joinColumns = @JoinColumn(name="produto_id"), 
    inverseJoinColumns = @JoinColumn(name="categoria_id"))
private List<Categoria> categorias = new ArrayList<>();
```

1. `@JoinTable(name = "PRODUTO_CATEGORIA", ...)`:
   - A anotação `@JoinTable` é usada para especificar que uma tabela intermediária será criada para representar a relação muitos-para-muitos entre as entidades.
   - `name = "PRODUTO_CATEGORIA"`: Define o nome da tabela intermediária no banco de dados que irá mapear a relação entre os produtos e categorias.

2. `joinColumns = @JoinColumn(name="produto_id")`:
   - `joinColumns` é uma propriedade de `@JoinTable` que especifica a coluna da tabela intermediária que mapeia a chave estrangeira da entidade principal 
      (neste caso, a entidade `Produto`).
   - `@JoinColumn(name="produto_id")`: Define o nome da coluna na tabela intermediária que armazenará as chaves estrangeiras relacionadas aos produtos.

3. `inverseJoinColumns = @JoinColumn(name="categoria_id")`:
   - `inverseJoinColumns` é outra propriedade de `@JoinTable` que especifica a coluna da tabela intermediária que mapeia a chave estrangeira da entidade 
      associada (neste caso, a entidade `Categoria`).
   - `@JoinColumn(name="categoria_id")`: Define o nome da coluna na tabela intermediária que armazenará as chaves estrangeiras relacionadas às categorias.

4. `private List<Categoria> categorias = new ArrayList<>();`:
   - Isso declara uma lista de objetos do tipo `Categoria`, que é a entidade associada à entidade `Produto` na relação muitos-para-muitos.
   - Essa lista representa as categorias às quais um produto pode estar associado.

No geral, esse código está mapeando uma relação muitos-para-muitos entre a entidade `Produto` e a entidade `Categoria` por meio de uma tabela intermediária 
chamada "PRODUTO_CATEGORIA". Essa tabela terá colunas para armazenar as chaves estrangeiras de produtos e categorias, permitindo que você associe vários 
produtos a várias categorias e vice-versa. A anotação `@JoinTable` é uma parte importante do mapeamento de associações complexas no JPA/Hibernate.


Já para a outra associação:

@ManyToMany(mappedBy = "categorias")
private List<Produto> produtos = new ArrayList<>();

mappedBy = "categorias": Essa é uma propriedade de @ManyToMany que especifica o nome da propriedade na entidade Produto que mapeia a associação reversa 
(a partir da perspectiva da entidade Produto). Isso significa que a associação foi mapeada na entidade Produto usando a propriedade categorias. Ou seja, 
A anotação @ManyToMany indica que essa relação existe, e a propriedade mappedBy especifica que a associação foi definida na entidade Produto usando a 
propriedade categorias.

Essa configuração permite que você acesse os produtos associados a uma categoria diretamente através da lista produtos na entidade de categoria. Além disso, 
a associação também estará refletida no lado oposto, ou seja, na lista de categorias na entidade Produto. Isso permite que você navegue facilmente entre as 
entidades relacionadas em ambas as direções da associação.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------

Anotação @JsonManagedReference

A anotação @JsonManagedReference é uma anotação fornecida pela biblioteca Jackson, que é amplamente usada para realizar a serialização e desserialização de 
objetos Java para formatos como JSON. Essa anotação é usada para gerenciar a serialização de associações bidirecionais entre objetos, permitindo que você 
especifique como as propriedades de um lado da relação devem ser serializadas.

Quando você tem uma relação bidirecional entre objetos, como um relacionamento pai-filho ou muitos-para-muitos, o Jackson normalmente serializa ambos os 
lados da relação. Isso pode levar a um loop infinito de serialização, onde um objeto A referencia um objeto B, e o objeto B referencia novamente o objeto A, 
e assim por diante.

A anotação @JsonManagedReference é usada para lidar com a parte "gerenciada" da relação, ou seja, a extremidade que controla a relação e a propriedade 
associada. Ela funciona em conjunto com a anotação @JsonBackReference, que é usada na extremidade oposta da relação para indicar que essa extremidade é a 
parte "de volta" da relação.

A anotação @JsonManagedReference trabalha em conjunto com @JsonBackReference para controlar a serialização das associações bidirecionais, evitando loops 
infinitos e garantindo que as propriedades relevantes sejam incluídas ou excluídas do JSON, conforme necessário.

---------- // ----------

Anotação @JsonBackReference

A anotação @JsonBackReference é uma anotação fornecida pela biblioteca Jackson, que é amplamente utilizada no ecossistema Java para realizar a serialização 
e desserialização de objetos Java para formatos como JSON. Essa anotação é usada para controlar a serialização de associações bidirecionais entre objetos, a
fim de evitar loops infinitos de serialização.

Quando você tem uma relação bidirecional entre objetos, como um relacionamento pai-filho ou muitos-para-muitos, o Jackson normalmente serializa ambos os 
lados da relação. Isso pode levar a um loop infinito de serialização, onde um objeto A referencia um objeto B, e o objeto B referencia novamente o objeto A, 
e assim por diante.

Para evitar esse loop de serialização, você pode usar a anotação @JsonBackReference em uma das extremidades da associação bidirecional. Quando um objeto é 
serializado e contém a anotação @JsonBackReference, o Jackson não incluirá essa propriedade no JSON resultante. Isso significa que a propriedade não será 
serializada, evitando o loop infinito.

É importante notar que a anotação @JsonBackReference deve ser usada com cuidado, especialmente se você precisar desserializar o JSON de volta para objetos 
Java, pois a propriedade marcada com @JsonBackReference não será reconstruída durante a desserialização. Se a desserialização for necessária, você pode 
considerar usar a anotação @JsonManagedReference no lado oposto da associação.

---------- // ----------

Anotação @ControllerAdvice

A anotação @ControllerAdvice é uma característica do Spring Framework que permite centralizar o tratamento de exceções e a aplicação de configurações 
globais para todos os controladores em uma aplicação Spring MVC. Ela é usada para criar classes que atuam como conselheiros (advisors) globais para 
controladores, permitindo a personalização de comportamentos que afetam todos os controladores.

Aqui estão alguns cenários em que @ControllerAdvice é útil:

Tratamento de Exceções Globais: Você pode usar @ControllerAdvice para criar métodos que manipulam exceções específicas em todos os controladores da 
                                aplicação. Isso centraliza a lógica de tratamento de exceções em um local.

Inicialização Global de Dados: Você pode usar @ControllerAdvice para pré-preencher modelos ou atributos que devem estar presentes em todas as respostas 
                               geradas pelos controladores.

Configurações de Ligação de Dados: Se você estiver usando o mecanismo de Data Binding (como @ModelAttribute ou @RequestParam), pode definir conversores e 
                                   formatadores personalizados de maneira global.
                                   
Portanto, a anotação @ControllerAdvice permite centralizar e modularizar o tratamento de exceções, a configuração de modelos e outras funcionalidades que 
podem afetar todos os controladores da sua aplicação Spring MVC. Isso simplifica o código e torna a manutenção mais eficiente.         

---------- // ----------

Anotação @ExceptionHandler

A anotação @ExceptionHandler é usada em métodos dentro de classes anotadas com @ControllerAdvice para tratar exceções lançadas por métodos em controladores 
(classes anotadas com @Controller) dentro de uma aplicação Spring MVC.

Quando um método em um controlador lança uma exceção, o Spring MVC procura por métodos anotados com @ExceptionHandler nas classes anotadas com 
@ControllerAdvice para tratar essa exceção específica. Isso permite centralizar o tratamento de exceções e personalizar a resposta apropriada para diferentes 
tipos de exceções.

Ao usar a anotação @ExceptionHandler, você pode personalizar o tratamento de exceções de maneira centralizada e oferecer respostas mais significativas e 
apropriadas aos clientes da sua aplicação. Isso ajuda a melhorar a experiência do usuário em caso de erros e facilita a manutenção do código.

---------- // ----------
O método abaixo é um método de tratamento de exceção em um controlador Spring. Esse método é responsável por tratar exceções do tipo 
`ObjectNotFoundException` e retornar uma resposta personalizada com informações de erro. Vou explicar cada parte desse método:

```
public ResponseEntity<StandardError> objectNotFound(ObjectNotFoundException e, 
        HttpServletRequest request) {
    
    StandardError standardError = new StandardError(HttpStatus.NOT_FOUND.value(), 
            e.getMessage(), System.currentTimeMillis());
    
    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(standardError);
}
```

1. `public ResponseEntity<StandardError> objectNotFound(ObjectNotFoundException e, HttpServletRequest request)`: Este é um método público que recebe dois 
parâmetros: uma exceção do tipo `ObjectNotFoundException` e um objeto `HttpServletRequest` que representa a solicitação HTTP atual.

2. `StandardError standardError = new StandardError(HttpStatus.NOT_FOUND.value(), e.getMessage(), System.currentTimeMillis());`: Aqui, é criado um objeto 
`StandardError`, que é uma classe personalizada para representar erros padronizados. Ele recebe três argumentos: o status HTTP 404 (NOT_FOUND), a mensagem 
de erro da exceção `ObjectNotFoundException` e o horário atual em milissegundos.

3. `return ResponseEntity.status(HttpStatus.NOT_FOUND).body(standardError);`: O método retorna uma instância de `ResponseEntity` configurada com o status 
HTTP 404 (NOT_FOUND) e o corpo sendo o objeto `standardError`. Isso significa que, quando essa exceção for tratada, o cliente receberá uma resposta HTTP 
com o status 404 e o corpo contendo as informações de erro encapsuladas no objeto `StandardError`.

Em resumo, esse método é um tratador de exceções específico para o caso em que uma exceção `ObjectNotFoundException` é lançada. Ele encapsula a exceção em 
um objeto `StandardError` personalizado e retorna uma resposta HTTP com o status 404 e as informações de erro no corpo. Isso é útil para fornecer 
informações claras sobre o erro ao cliente que fez a solicitação, melhorando a experiência do usuário em caso de não encontrar um objeto específico.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------
Detalhando o código:

private Set<String> telefones = new HashSet<>();

O script declara uma variável chamada `telefones` do tipo `Set<String>`, inicializando-a com uma instância da classe `HashSet<String>`. 
Vou explicar cada parte desse script:


1. `private`: Isso define o modificador de acesso da variável como privado. Isso significa que a variável `telefones` só pode ser acessada dentro da classe 
onde foi declarada.

2. `Set<String>`: Isso declara o tipo da variável como um conjunto (set) que armazena elementos do tipo `String`. Um conjunto é uma coleção que não permite 
duplicatas, ou seja, não pode conter o mesmo elemento mais de uma vez.

3. `telefones`: Este é o nome da variável.

4. `= new HashSet<>();`: Aqui, a variável `telefones` é inicializada com uma nova instância da classe `HashSet<String>`. O `HashSet` é uma implementação da 
interface `Set` que armazena os elementos de forma não ordenada e não permite elementos duplicados.

Portanto, a variável `telefones` é um conjunto que armazena valores do tipo `String`. É comum usar conjuntos para armazenar coleções de valores únicos, como 
números de telefone, endereços de e-mail ou outras informações que não devem ser repetidas. O uso de um conjunto garante que os números de telefone sejam 
únicos, não permitindo duplicatas.

---------- // ----------
Anotação `@ElementCollection`

A anotação `@ElementCollection` é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada para mapear coleções de valores básicos 
(primitivos, tipos embutidos ou tipos enumerados) como parte de uma entidade. Isso permite que você armazene várias instâncias de um determinado tipo 
diretamente na tabela associada à entidade principal.

Aqui estão os principais pontos para entender sobre a anotação `@ElementCollection`:

1. **Uso em coleções de valores básicos**: A anotação `@ElementCollection` é usada para mapear uma coleção de valores simples, como strings, números, datas, 
enumerações ou até mesmo tipos embutidos, em uma tabela separada associada à entidade principal.

2. **Criação de tabela auxiliar**: Ao usar `@ElementCollection`, o JPA cria automaticamente uma tabela auxiliar para armazenar os elementos da coleção. Essa 
tabela auxiliar terá uma coluna para armazenar o valor e, opcionalmente, outras colunas para armazenar chaves estrangeiras que vinculam a coleção à entidade 
principal.

3. **Associação à entidade principal**: Através da anotação `@ElementCollection`, a coleção é associada à entidade principal sem a necessidade de criar uma 
nova classe de entidade para representar a coleção.

4. **Flexibilidade na modelagem**: `@ElementCollection` é uma maneira eficaz de modelar atributos complexos que não justificam a criação de uma entidade 
separada. Por exemplo, se uma entidade tiver uma lista de endereços ou números de telefone, isso pode ser representado usando `@ElementCollection`.

Em resumo, a anotação `@ElementCollection` é usada para mapear coleções de valores básicos em uma entidade JPA, criando tabelas auxiliares automaticamente 
para armazenar esses valores associados à entidade principal. Isso é útil para modelar atributos complexos e repetitivos sem a necessidade de criar entidades 
separadas.

---------- // ----------

Anotação @CollectionTable

A anotação @CollectionTable é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada em conjunto com a anotação @ElementCollection. 
Ela é usada para personalizar a tabela auxiliar criada quando você deseja mapear uma coleção de valores básicos usando a anotação @ElementCollection. A 
anotação @CollectionTable permite que você especifique detalhes sobre a tabela auxiliar que será criada para armazenar os elementos da coleção.

---------- // ----------

Explicando a codificação:

```
@ElementCollection
@CollectionTable(name = "TELEFONE")
private Set<String> telefones = new HashSet<>();

```
1. @ElementCollection: Essa anotação é usada para indicar que a variável telefones representa uma coleção de elementos, que nesse caso são valores básicos 
(no caso, strings). Isso informa ao JPA para criar uma tabela auxiliar para armazenar esses valores.

2. @CollectionTable(name = "TELEFONE"): Essa anotação é usada para personalizar a tabela auxiliar que será criada para armazenar os elementos da coleção 
telefones. O atributo name especifica o nome da tabela auxiliar como "TELEFONE".

3. private Set<String> telefones = new HashSet<>();: Aqui, estamos declarando uma variável chamada telefones do tipo Set<String>, que representa uma coleção 
de valores de telefone (strings). A variável é inicializada com uma instância vazia de HashSet<>.

No geral, esse trecho de código é usado para criar uma tabela auxiliar chamada "TELEFONE" que armazenará os valores de telefone de uma entidade. A coleção 
de telefones é representada pela variável telefones e é mapeada como parte da entidade usando @ElementCollection e @CollectionTable. Isso é útil para 
representar uma relação de composição entre uma entidade principal e seus telefones associados.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------

Anotação @MapsId

A anotação `@MapsId` é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada para mapear o atributo de uma entidade como parte da 
chave primária (primary key) de outra entidade associada. Essa anotação é comumente usada para mapear um relacionamento um-para-um (one-to-one) onde a 
chave primária da entidade associada também é a chave primária da entidade principal.

Aqui estão os principais pontos para entender sobre a anotação `@MapsId`:

1. **Uso com relacionamentos um-para-um**: A anotação `@MapsId` é usada em uma propriedade que representa um relacionamento um-para-um, onde a chave 
   primária da entidade associada é usada como chave primária da entidade principal.

2. **Evita a duplicação de chave primária**: O uso de `@MapsId` permite que você evite duplicar a chave primária da entidade associada na entidade principal, 
   o que pode ser útil em cenários onde a entidade associada deve ser referenciada através da mesma chave primária da entidade principal.

3. **Economiza espaço de armazenamento**: Ao mapear o atributo como parte da chave primária, você economiza espaço de armazenamento, pois não precisa 
   duplicar a mesma informação em ambas as entidades.

Aqui está um exemplo simples de uso da anotação `@MapsId`:

```
@Entity
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne
    @MapsId
    private DetalhesUsuario detalhes;
    
    // outros atributos, getters e setters
}

@Entity
public class DetalhesUsuario {
    @Id
    private Long id;

    // outros atributos, getters e setters
}
```

Neste exemplo, a classe `Usuario` possui um relacionamento um-para-um com a classe `DetalhesUsuario`. A anotação `@MapsId` é usada no relacionamento, 
indicando que a chave primária da classe `Usuario` é mapeada para a chave primária da classe `DetalhesUsuario`. Isso significa que o mesmo valor da chave 
primária será usado para ambas as tabelas, evitando duplicações e economizando espaço.

Em resumo, a anotação `@MapsId` é usada para mapear um atributo como parte da chave primária de outra entidade associada. Ela é útil para evitar duplicações 
de chave primária e economizar espaço de armazenamento em cenários de relacionamento um-para-um.

---------- // ----------

Anotação @Inheritance

A anotação `@Inheritance` é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada para definir a estratégia de herança a ser usada em 
hierarquias de classes quando essas classes são mapeadas para tabelas em um banco de dados relacional.

A herança em JPA refere-se à situação em que uma hierarquia de classes (uma classe pai e suas subclasses) é mapeada para tabelas em um banco de dados. A 
anotação `@Inheritance` é usada para definir como essa hierarquia de classes será representada no banco de dados.

Existem duas estratégias principais de herança suportadas pela anotação `@Inheritance`:

1. **Single Table Inheritance (herança em uma única tabela)**: Nessa estratégia, todas as classes na hierarquia (classe pai e subclasses) são mapeadas para 
   a mesma tabela. A tabela contém colunas para todos os atributos das classes envolvidas, e uma coluna adicional é usada para identificar qual classe cada 
   linha representa. A única tabela é recomendada para casos onde possuem poucos atributos definidos nas subclasses, para não ficar uma tabela muito grande.

2. **Joined Table Inheritance (herança em tabelas separadas)**: Nessa estratégia, cada classe na hierarquia é mapeada para uma tabela separada no banco de 
   dados. A tabela da classe pai contém os atributos comuns a todas as classes, enquanto as tabelas das subclasses contêm os atributos específicos de cada 
   classe. Chaves estrangeiras são usadas para estabelecer as relações entre as tabelas.

Aqui está um exemplo de uso da anotação `@Inheritance` com a estratégia Single Table Inheritance:

```
@Entity
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class Pessoa {
    @Id
    @GeneratedValue
    private Long id;

    private String nome;

    // outros atributos, getters e setters
}

@Entity
public class Cliente extends Pessoa {
    private String endereco;

    // outros atributos, getters e setters
}

@Entity
public class Funcionario extends Pessoa {
    private Double salario;

    // outros atributos, getters e setters
}
```

Neste exemplo, a classe `Pessoa` é a classe pai na hierarquia, e as classes `Cliente` e `Funcionario` são subclasses. A anotação `@Inheritance` é usada para 
definir a estratégia de herança como Single Table Inheritance (`InheritanceType.SINGLE_TABLE`). Isso significa que todas as classes compartilham a mesma 
tabela no banco de dados.

Em resumo, a anotação `@Inheritance` é usada para definir a estratégia de herança a ser usada em hierarquias de classes quando essas classes são mapeadas 
para tabelas no banco de dados. Ela permite escolher entre diferentes estratégias, como Single Table Inheritance ou Joined Table Inheritance, para 
representar a herança no esquema do banco de dados.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------

Anotação @Embeddable

A anotação `@Embeddable` é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada para indicar que uma classe deve ser usada como um 
componente embutido em outra classe de entidade. Essa anotação é geralmente usada para criar tipos embutidos, onde os atributos de uma classe são mapeados 
diretamente como colunas na tabela da entidade que a contém.

Aqui estão os principais pontos para entender sobre a anotação `@Embeddable`:

1. **Criação de tipos embutidos**: A anotação `@Embeddable` é usada para criar tipos de objetos que serão embutidos em outras entidades. Esses tipos não 
   possuem uma identidade própria no banco de dados e são armazenados diretamente nas colunas da tabela da entidade principal.

2. **Uso em atributos de entidades**: A classe anotada com `@Embeddable` é usada como um tipo de atributo em uma classe de entidade. Os atributos da classe 
   embutida são mapeados diretamente como colunas da tabela da entidade que a contém.

3. **Reutilização de componentes**: O uso de `@Embeddable` permite a reutilização de componentes de dados em várias entidades, melhorando a modularidade e 
   reduzindo a repetição de código.

Em resumo, a anotação `@Embeddable` é usada para criar tipos embutidos que são mapeados como atributos nas tabelas das entidades que os contêm. Isso ajuda a 
modularizar o código, reutilizar componentes de dados e simplificar o mapeamento de atributos complexos.

---------- // ----------

Analisando o código:

private Set<ItemPedido> itens = new HashSet<ItemPedido>();

1. Set<ItemPedido>: Isso declara o tipo da variável como um conjunto (Set) que armazena elementos do tipo ItemPedido. Um conjunto é uma coleção que não permite 
   duplicatas, ou seja, não pode conter o mesmo elemento mais de uma vez.


2. = new HashSet<ItemPedido>();: Aqui, a variável itens é inicializada com uma nova instância da classe HashSet<ItemPedido>. O HashSet é uma implementação 
   da interface Set que armazena os elementos de forma não ordenada e não permite elementos duplicados.

Portanto, a variável itens é um conjunto que armazena objetos do tipo ItemPedido. O uso de um conjunto garante que cada item de pedido seja único, evitando 
a duplicação de itens no conjunto. Isso é útil, por exemplo, quando você está trabalhando com uma lista de itens de pedido em um sistema de comércio 
eletrônico, onde cada item de pedido deve ser único.

---------- // ----------

Anotação @EmbeddedId

A anotação @EmbeddedId é uma anotação fornecida pelo framework JPA (Java Persistence API) que é usada para indicar que uma classe é usada como uma chave 
primária composta (composite primary key) para uma entidade. Essa anotação é usada em conjunto com outra classe anotada com @Embeddable, que representa a 
chave primária composta.

Aqui estão os principais pontos para entender sobre a anotação @EmbeddedId:

 1. Chave primária composta: Em algumas situações, você pode ter uma entidade que requer uma chave primária composta, ou seja, uma chave primária que 
    consiste em mais de um atributo. A anotação @EmbeddedId é usada para indicar que a classe usada como chave primária composta será embutida (embedded) 
    na entidade.

 2. Uso de @Embeddable: A classe que é usada como chave primária composta deve ser anotada com @Embeddable. Essa classe encapsula os atributos que compõem 
    a chave primária composta.

 3. Uso em atributos: A anotação @EmbeddedId é colocada em um atributo da entidade que representa a chave primária composta.
 
Aqui está um exemplo simples qualquer de uso da anotação @EmbeddedId:

```
@Embeddable
public class PedidoId implements Serializable {
    private Long clienteId;
    private Long numeroPedido;

    // construtores, getters e setters
}

@Entity
public class Pedido {
    @EmbeddedId
    private PedidoId id;

    private String descricao;

    // outros atributos, getters e setters
}
```
Neste exemplo, a classe PedidoId é anotada com @Embeddable, indicando que ela é usada como parte da chave primária composta da classe Pedido. A classe 
PedidoId encapsula dois atributos: clienteId e numeroPedido.

A classe Pedido é uma entidade que usa a chave primária composta representada pela classe PedidoId. O atributo id na classe Pedido é anotado com 
@EmbeddedId, indicando que ele contém a chave primária composta.

Em resumo, a anotação @EmbeddedId é usada para indicar que uma classe é usada como chave primária composta embutida em uma entidade. Isso é útil quando 
você precisa de uma chave primária composta que consiste em mais de um atributo.

----------------------------------------------------------------------------- // -----------------------------------------------------------------------------
IMPORTANTE!!!

Tratando a Serialização entre os mapeamentos:

Vamos ter que tratar do mapeamento bidirecional do Pedido entre Cliente, Endereço, ItemPedido e Pagamento (PagamentoComBoleto e PagamentoComCartao). 
 
 -> Entre Pedido e Cliente tem uma relação de associação de mão dupla, ou seja, na Classe Pedido vai permitir o cliente a ser serializado e na Classe Cliente  
não vai ser permitido os pedidos a serem serializados. Contudo, vamos fazer um endpoint para o pedido onde vai ser mostrado o cliente. Portanto, na Classe
Pedido vamos utilizar a anotação @JsonManagedReference no campo do tipo Cliente. E na Classe Cliente vamos utilizar a anotação @JsonBackReference 
no campo do tipo Pedido.

-> Entre Pedido e Endereço tem uma relação de mão única, ou seja, é unidirecional. Logo não precisamos tratar a serialização.

-> Entre Pedido e Pagamento tem uma relação de associação de mão dupla, ou seja, Pedido tem que enxergar o Pagamento, mas o Pagamento não pode enxergar o 
Pedido (ou seja, na classe Pedido vai ser permitido que o pagamento seja serializado, logo no campo 'pagamento' vamos utilizar a anotação @JsonManagedReference, 
já na Classe Pagamento não vai ser permitido que o Pedido seja serializado, logo no campo 'pedido' vamos utilizar a anotação @JsonBackReference).

-> Entre Pedido e ItemPedido existe uma chave composta (ItemPedidoPK id que seria o (pedido_id e produto_id)). A maneira de fazer aqui e não se preocupar 
com dois níveis de acessos a objetos, ou seja, na Classe ItemPedido vamos fazer a anotação @JsonIgnore no campo 'id' do tipo ItemPedidoPK, ou seja, esse 
campo não vai ser considerado durante o processo de serialização para JSON, logo ele não vai serializar nem o Produto e nem o Pedido. E também temos que 
ignorar o método getPedido() para indicar que esse método não deve ser serializado ao gerar JSON. Já o método getProduto() não vamos ignorá-lo, porque 
precisamos obter o objeto Produto associado a esse item de pedido para ser mostrado o produto.

  . Porém, agora temos que permitir que o Pedido possa serializar o ItemPedido, portanto basta definir o mapeamento @OneToMany como já está definido na 
    Classe Pedido no campo "itens" do tipo Set<ItemPedido>. 

  .Já o produto leva a um questionamento: A partir de um produto que foi recuperado de um sistema eu vou querer serializar os itens de pedidos que estão 
   associados a ele? Ou seja, a partir de um item de pedido saber quai(s) produto(s) está(ão) associado ao item ou a partir do produto
   saber os itens que estão associados a ele? O importante saber é que a partir do item de pedidos eu tenho acesso ao produto, então vamos ignorar o campo 
   'itens' do tipo 'Set<ItemPedido>' através da anotação @JsonIgnore. E também temos que ignorar o método getPedidos (lista de pedidos) uma vez que faz uso 
   do getters.

---------- // ----------

Anotação `@JsonIgnore`

A anotação `@JsonIgnore` é uma anotação fornecida pela biblioteca Jackson, que é amplamente usada para serialização e desserialização de objetos JSON em 
Java. A anotação `@JsonIgnore` é usada para indicar que um campo ou método de uma classe não deve ser considerado durante o processo de serialização para 
JSON.

Aqui estão os principais pontos para entender sobre a anotação `@JsonIgnore`:

1. **Exclusão da serialização**: Quando um campo ou método é anotado com `@JsonIgnore`, ele não será incluído no JSON gerado durante o processo de 
   serialização. Isso é útil quando você não deseja que determinados campos sejam visíveis nos dados JSON resultantes.

2. **Uso em campos e métodos**: A anotação pode ser colocada em campos ou em métodos (getter/setter) que representam propriedades da classe.

3. **Evitando recursão infinita**: A anotação é frequentemente usada para evitar a recursão infinita em relacionamentos bidirecionais entre objetos, onde 
   cada objeto referencia o outro. Ao marcar um lado da relação com `@JsonIgnore`, você evita que a serialização fique presa em um loop infinito.

Aqui está um exemplo simples de uso da anotação `@JsonIgnore`:

```
public class Usuario {
    private Long id;
    private String nome;

    @JsonIgnore
    private String senha;

    // getters e setters
}
```

Neste exemplo, o campo `senha` foi anotado com `@JsonIgnore`, o que significa que o valor desse campo não será incluído quando o objeto `Usuario` for 
serializado em JSON. Isso é comum em campos sensíveis que você não deseja expor no JSON resultante.

Em resumo, a anotação `@JsonIgnore` é usada para indicar que um campo ou método de uma classe não deve ser considerado durante o processo de serialização 
para JSON. Isso é útil para evitar a exposição de certos campos sensíveis ou para evitar recursão infinita em relacionamentos complexos durante a 
serialização JSON.

